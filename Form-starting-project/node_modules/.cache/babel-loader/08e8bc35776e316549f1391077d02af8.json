{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SunilSolankiIntern\\\\Desktop\\\\Form-starting-project\\\\src\\\\components\\\\BasicForm.js\",\n    _s = $RefreshSig$();\n\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicForm = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value !== \"\");\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetLNameInput\n  } = useInput(value => value !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value !== \"\");\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredLNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredLName);\n    console.log(enteredEmail);\n    resetNameInput();\n    resetLNameInput();\n    resetEmailInput();\n  };\n\n  const invalidInputClasses = nameInputHasError && lnameInputHasError && emailInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: invalidInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          onChange: nameChangeHandler,\n          onBlur: nameBlurHandler,\n          value: enteredName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), enteredNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name must not be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: invalidInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"Lname\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"Lname\",\n          onChange: lnameChangeHandler,\n          onBlur: lnameBlurHandler,\n          value: enteredLName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), enteredLNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name must not be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: invalidInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"E-Mail Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), enteredEmailIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicForm, \"QPoJrqYk43Z8zl82DLX4/jtPL3w=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = BasicForm;\nexport default BasicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"sources":["C:/Users/SunilSolankiIntern/Desktop/Form-starting-project/src/components/BasicForm.js"],"names":["useInput","BasicForm","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","enteredLName","enteredLNameIsValid","lnameInputHasError","lnameChangeHandler","lnameBlurHandler","resetLNameInput","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","formIsValid","formSubmitHandler","event","preventDefault","console","log","invalidInputClasses"],"mappings":"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","sourcesContent":["import useInput from \"../hooks/use-input\";\n\nconst BasicForm = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value !== \"\");\n\n  const {\n    value: enteredLName,\n    isValid: enteredLNameIsValid,\n    hasError: lnameInputHasError,\n    valueChangeHandler: lnameChangeHandler,\n    inputBlurHandler: lnameBlurHandler,\n    reset: resetLNameInput,\n  } = useInput((value) => value !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value !== \"\");\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredLNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredLName);\n    console.log(enteredEmail);\n\n    resetNameInput();\n    resetLNameInput();\n    resetEmailInput();\n  };\n\n  const invalidInputClasses =\n    nameInputHasError && lnameInputHasError && emailInputHasError\n      ? \"form-control invalid\"\n      : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className=\"control-group\">\n        <div className={invalidInputClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n            value={enteredName}\n          />\n          {enteredNameIsValid && (\n            <p className=\"error-text\">Name must not be empty.</p>\n          )}\n        </div>\n        <div className={invalidInputClasses}>\n          <label htmlFor=\"Lname\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"Lname\"\n            onChange={lnameChangeHandler}\n            onBlur={lnameBlurHandler}\n            value={enteredLName}\n          />\n          {enteredLNameIsValid && (\n            <p className=\"error-text\">Name must not be empty.</p>\n          )}\n        </div>\n      </div>\n      <div className={invalidInputClasses}>\n        <label htmlFor=\"email\">E-Mail Address</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {enteredEmailIsValid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n"]},"metadata":{},"sourceType":"module"}