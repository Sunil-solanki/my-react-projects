{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","components/Pages/QuoteDetail.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","quotesId","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","NewCommentForm","props","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","loadedComments","useParams","addedCommentHandler","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","path","exact","to"],"mappings":"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","file":"static/js/4.f6e4fc70.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://server-project-1ff7a-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quotesId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3Bu-m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3NWmH\",\"loading\":\"NewCommentForm_loading__3ROf2\",\"control\":\"NewCommentForm_control__XkJm1\",\"actions\":\"NewCommentForm_actions__njZnv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1nzHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1KxY-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__QR80d\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    sendRequest({commentData: { text: enteredText }, quotesId: props.quotesId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  // const params = useParams();\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const { quotesId } = useParams();\n  useEffect(() => {\n    sendRequest(quotesId);\n  }, [quotesId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quotesId);\n  }, [sendRequest, quotesId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />{\" \"}\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quotesId={quotesId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment } from \"react\";\r\nimport { Route, useParams } from \"react-router-dom\";\r\nimport Comments from \"../comments/Comments\";\r\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { getSingleQuote } from \"../../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport { useEffect } from \"react/cjs/react.development\";\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n\r\n  const { quotesId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quotesId);\r\n  }, [sendRequest, quotesId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path=\"/quotes/:quotesId\" exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`/quotes/${params.quotesId}/comment`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path=\"/quotes/:quotesId/comment\" exact>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}